{"version":3,"sources":["../src/actions/webSearch.ts","../src/services/webSearchService.ts","../src/templates/searchParamsTemplate.ts","../src/utils/searchUtils.ts","../src/examples/webSearchExamples.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    composeContext,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport { WebSearchService } from \"../services/webSearchService\";\nimport type { SearchResult } from \"../types\";\nimport { searchParamsTemplate } from \"../templates/searchParamsTemplate\";\nimport { \n    isValidSearchParams, \n    MaxTokens, \n    DEFAULT_MAX_WEB_SEARCH_TOKENS\n} from \"../utils/searchUtils\";\nimport { webSearchExamples } from \"../examples/webSearchExamples\";\n\nexport const webSearch: Action = {\n    name: \"WEB_SEARCH\",\n    similes: [\n        \"SEARCH_WEB\",\n        \"INTERNET_SEARCH\",\n        \"LOOKUP\",\n        \"QUERY_WEB\",\n        \"FIND_ONLINE\",\n        \"SEARCH_ENGINE\",\n        \"WEB_LOOKUP\",\n        \"ONLINE_SEARCH\",\n        \"FIND_INFORMATION\",\n    ],\n    suppressInitialMessage: true,\n    description: \"Perform a web search to find information related to the message.\",\n    // eslint-disable-next-line\n    validate: async (runtime: IAgentRuntime) => {\n        return !!runtime.getSetting(\"TAVILY_API_KEY\");\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Composing state for message:\", message);\n        state = (await runtime.composeState(message)) as State;\n        const userId = runtime.agentId;\n        elizaLogger.log(\"User ID:\", userId);\n        elizaLogger.log(\"Original search query:\", message.content.text);\n\n        try {\n            const recentMessagesData = state.recentMessagesData || [];\n            \n            // Find the last agent message (where agentId === message.agentId)\n            // We use the agent's message as it often contains a more precise summary of the user's request\n            const lastAgentMessage = recentMessagesData\n                .filter(m => m.agentId === message.agentId)\n                .pop();\n                \n            const lastAgentMessageText = lastAgentMessage.content.text;\n            elizaLogger.log(\"Last agent message:\", lastAgentMessageText);\n            \n            const searchParamsContext = composeContext({\n                state: {\n                    ...state,\n                    message: lastAgentMessageText\n                },\n                template: searchParamsTemplate\n            });\n\n            const searchParams = await generateObjectDeprecated({\n                runtime,\n                context: searchParamsContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            // Validate extracted parameters\n            const isParamsValid = isValidSearchParams(searchParams);\n            if (!isParamsValid) {\n                elizaLogger.warn(\"Invalid search parameters, using defaults\");\n            }\n            elizaLogger.log(\"Extracted search parameters:\", searchParams);\n\n            // Use the reformulated search query from the template\n            const webSearchPrompt = searchParams.query;\n            elizaLogger.log(\"Using reformulated search query:\", webSearchPrompt);\n\n            // The 'limit' parameter from searchParams is passed to the WebSearchService\n            // where it's used as the 'maxResults' parameter in the Tavily API call\n            const webSearchService = new WebSearchService();\n            await webSearchService.initialize(runtime);\n            \n            // Create search options with proper type conversion\n            const searchOptions = isParamsValid ? {\n                limit: typeof searchParams.limit === 'string' \n                    ? parseInt(searchParams.limit, 10) \n                    : searchParams.limit,\n                type: searchParams.type\n            } : undefined;\n            \n            elizaLogger.log(\"Search options:\", searchOptions);\n            \n            const searchResponse = await webSearchService.search(\n                webSearchPrompt,\n                searchOptions\n            );\n\n            if (searchResponse && searchResponse.results.length) {\n                // Explicitly limit the number of results to display\n                const limit = searchOptions?.limit || 1;\n                \n                // Take only the first 'limit' results\n                const limitedResults = searchResponse.results.slice(0, limit);\n                \n                const responseList = searchResponse.answer\n                    ? `${searchResponse.answer}${\n                          Array.isArray(limitedResults) &&\n                          limitedResults.length > 0\n                              ? `\\n\\nFor more details, you can check out these resources:\\n${limitedResults\n                                    .map(\n                                        (result: SearchResult, index: number) =>\n                                            `${index + 1}. [${result.title}](${result.url})`\n                                    )\n                                    .join(\"\\n\")}`\n                              : \"\"\n                      }`\n                    : \"\";\n                \n                callback({\n                    text: MaxTokens(responseList, DEFAULT_MAX_WEB_SEARCH_TOKENS),\n                });\n            } else {\n                elizaLogger.error(\"Search failed or returned no data\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in web search handler:\", error);\n        }\n    },\n    examples: webSearchExamples,\n} as Action;","import {\n    Service,\n    type IAgentRuntime,\n    ServiceType,\n} from \"@elizaos/core\";\nimport { tavily } from \"@tavily/core\";\nimport type { IWebSearchService, SearchOptions, SearchResponse } from \"../types\";\n\nexport type TavilyClient = ReturnType<typeof tavily>; // declaring manually because original package does not export its types\n\nexport class WebSearchService extends Service implements IWebSearchService {\n    public tavilyClient: TavilyClient\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {\n        const apiKey = _runtime.getSetting(\"TAVILY_API_KEY\") as string;\n        if (!apiKey) {\n            throw new Error(\"TAVILY_API_KEY is not set\");\n        }\n        this.tavilyClient = tavily({ apiKey });\n    }\n\n    getInstance(): IWebSearchService {\n        return WebSearchService.getInstance();\n    }\n\n    static get serviceType(): ServiceType {\n        return ServiceType.WEB_SEARCH;\n    }\n\n    async search(\n        query: string,\n        options?: SearchOptions,\n    ): Promise<SearchResponse> {\n        try {\n            let maxResults = 1;\n            \n            if (options && options.limit !== undefined) {\n                maxResults = typeof options.limit === 'string' \n                    ? parseInt(options.limit, 10) \n                    : options.limit;\n            }\n            \n            const tavilyOptions = {\n                includeAnswer: options?.includeAnswer ?? true,\n                maxResults: maxResults,\n                topic: options?.type || \"general\",\n                searchDepth: options?.searchDepth || \"basic\",\n                includeImages: options?.includeImages || false,\n                days: options?.days || 3,\n            };\n            \n            const response = await this.tavilyClient.search(query, tavilyOptions);\n            \n            return response;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n","/**\n * Template to extract search parameters from user query.\n * This template is used by the LLM to analyze the query and extract:\n * 1. The number of results desired (default: 1)\n * 2. The type of search (news or general, default: general)\n * 3. A reformulated search query for better results\n */\nexport const searchParamsTemplate = `\nAnalyze the following message and extract these parameters:\n1. The number of results desired (default: 1)\n2. The type of search (news or general, default: general)\n3. A reformulated search query that will yield the best search results\n\nReturn a JSON object with these parameters:\n\nExample response:\n\\`\\`\\`json\n{\n    \"limit\": 3,\n    \"type\": \"news\",\n    \"query\": \"SpaceX recent rocket launches and achievements\"\n}\n\\`\\`\\`\n\nIf no number of results is specified, set \"limit\" to 1.\nIf no type is specified, set \"type\" to \"general\".\nAlways include a reformulated \"query\" that is clear, specific, and optimized for search engines.\n\nIMPORTANT: Your reformulated query should:\n- Stay faithful to the original request\n- NOT add specific topics or technologies that weren't mentioned\n- NOT assume specific use cases unless clearly stated\n- Focus on the main subject of the query\n- Be concise and clear\n\nHere are some examples of how to interpret queries:\n- \"Find me 5 articles about AI\" → limit: 5, type: \"general\", query: \"artificial intelligence latest developments\"\n- \"What are the latest news about SpaceX?\" → limit: 1, type: \"news\", query: \"SpaceX recent news\"\n- \"Give me multiple sources about climate change\" → limit: 5, type: \"general\", query: \"climate change information\"\n- \"Find detailed information about quantum computing\" → limit: 3, type: \"general\", query: \"quantum computing overview\"\n- \"Show me recent developments in blockchain\" → limit: 3, type: \"news\", query: \"blockchain recent developments\"\n- \"Can you look up information about Cursor?\" → limit: 1, type: \"general\", query: \"Cursor software information\"\n\nMessage to analyze: {{message}}\n\nExtract the search parameters from the message above. Reformulate the query for better search results. Respond with a JSON markdown block.\n`; ","import { encodingForModel, type TiktokenModel } from \"js-tiktoken\";\nimport type { SearchOptions } from \"../types\";\n\nexport const DEFAULT_MAX_WEB_SEARCH_TOKENS = 4000;\nexport const DEFAULT_MODEL_ENCODING = \"gpt-3.5-turbo\";\n\n/**\n * Calculate the total number of tokens in a string\n */\nexport function getTotalTokensFromString(\n    str: string,\n    encodingName: TiktokenModel = DEFAULT_MODEL_ENCODING\n) {\n    const encoding = encodingForModel(encodingName);\n    return encoding.encode(str).length;\n}\n\n/**\n * Limit a string to a maximum number of tokens\n */\nexport function MaxTokens(\n    data: string,\n    maxTokens: number = DEFAULT_MAX_WEB_SEARCH_TOKENS\n): string {\n    if (getTotalTokensFromString(data) >= maxTokens) {\n        return data.slice(0, maxTokens);\n    }\n    return data;\n}\n\n/**\n * Validate extracted search parameters and convert strings to numbers if necessary\n */\nexport function isValidSearchParams(params: any): params is SearchOptions {\n    if (typeof params !== 'object' || params === null) {\n        return false;\n    }\n    \n    // Check limit\n    if ('limit' in params) {\n        // If limit is a string, try to convert it to a number\n        if (typeof params.limit === 'string') {\n            const parsedLimit = parseInt(params.limit, 10);\n            if (isNaN(parsedLimit) || parsedLimit < 1) {\n                return false;\n            }\n            // Automatically convert to number\n            params.limit = parsedLimit;\n        } else if (typeof params.limit !== 'number' || params.limit < 1 || !Number.isInteger(params.limit)) {\n            return false;\n        }\n    }\n    \n    // Check type\n    if ('type' in params) {\n        if (typeof params.type !== 'string' || (params.type !== 'news' && params.type !== 'general')) {\n            return false;\n        }\n    }\n    \n    return true;\n} ","/**\n * Examples of web search usage for the agent\n * These examples help the agent understand how to use the web search action\n */\nexport const webSearchExamples = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Find the latest news about SpaceX launches.\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest news about SpaceX launches:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you find 3 details about the iPhone 16 release?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the details I found about the iPhone 16 release:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What is the schedule for the next FIFA World Cup?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the schedule for the next FIFA World Cup:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: { text: \"Check the latest stock price of Tesla.\" },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest stock price of Tesla I found:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Find 5 trending movies in the US.\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here are the current trending movies in the US:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What is the latest score in the NBA finals?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the latest score from the NBA finals:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: { text: \"When is the next Apple keynote event?\" },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Here is the information about the next Apple keynote event:\",\n                action: \"WEB_SEARCH\",\n            },\n        },\n    ],\n]; ","import { webSearch } from \"./actions/webSearch\";\nimport { WebSearchService } from \"./services/webSearchService\";\n\nexport const webSearchPlugin = {\n    name: \"webSearch\",\n    description: \"Search the web and get news\",\n    actions: [webSearch],\n    evaluators: [],\n    providers: [],\n    services: [new WebSearchService() as any],\n    clients: [],\n    adapters: [],\n};\n\nexport default webSearchPlugin;\n"],"mappings":"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","names":[]}